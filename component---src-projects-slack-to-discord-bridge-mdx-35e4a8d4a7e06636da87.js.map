{"version":3,"file":"component---src-projects-slack-to-discord-bridge-mdx-35e4a8d4a7e06636da87.js","mappings":"gKAiCO,MAAMA,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,C,aC1EA,SAASE,EAAkBC,GACzB,OAAOC,EAAAA,cAAoBC,EAAAA,QAC7B,CAKA,MAJA,SAAoBF,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOG,QAASC,GAAaC,OAAOC,OAAO,CAAC,EAAGC,IAAsBP,EAAMH,YAC3E,OAAOO,EAAYH,EAAAA,cAAoBG,EAAWJ,EAAOC,EAAAA,cAAoBF,EAAmBC,IAAUD,GAC5G,C,+HCJO,MAAMS,EAAO,IAAM,gBAAC,IAAG,CAACC,UAAU,cAE1B,SAASP,IACvB,OACC,wBAAMQ,MAAM,gBACX,mDACA,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAG,qBAEL,IAGV,C","sources":["webpack://home/./node_modules/@mdx-js/react/lib/index.js","webpack://home/./src/projects/Slack-to-Discord-Bridge.mdx","webpack://home/./src/pages/404.js"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport NotFoundPage from \"../pages/404\";\nfunction _createMdxContent(props) {\n  return React.createElement(NotFoundPage);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport { Link } from \"gatsby\"\nimport \"../styles.css\";\nimport Seo from \"../components/react/atoms/SEO\";\nimport \"./404.css\";\n\nexport const Head = () => <Seo siteTitle=\"Not Found\"/>;\n\nexport default function NotFoundPage() {\n\treturn (\n\t\t<main class=\"http404-main\">\n\t\t\t<h1>There's Nothing Here!</h1>\n\t\t\t<Link to=\"/\">\n\t\t\t\t(Go back to home)\n\t\t\t</Link>.\n\t\t</main>\n\t);\n}"],"names":["MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","React","NotFoundPage","wrapper","MDXLayout","Object","assign","_provideComponents","Head","siteTitle","class","Link","to"],"sourceRoot":""}